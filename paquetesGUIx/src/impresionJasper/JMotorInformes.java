package impresionJasper;/* * JMotorInformes.java * * Created on 5 de septiembre de 2007, 2:17 * * To change this template, choose Tools | Template Manager * and open the template in the editor. */import ListDatos.JListDatos;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.InputStream;import java.io.OutputStream;import java.util.HashMap;import java.util.Map;import javax.print.PrintService;import javax.print.PrintServiceLookup;import javax.print.attribute.HashPrintRequestAttributeSet;import javax.print.attribute.PrintRequestAttributeSet;import javax.print.attribute.Size2DSyntax;import javax.print.attribute.standard.MediaPrintableArea;import javax.print.attribute.standard.MediaSize;import javax.print.attribute.standard.MediaSizeName;import javax.print.attribute.standard.OrientationRequested;import net.sf.jasperreports.engine.JRDataSource;import net.sf.jasperreports.engine.JRException;import net.sf.jasperreports.engine.JRExporter;import net.sf.jasperreports.engine.JRExporterParameter;import net.sf.jasperreports.engine.JasperCompileManager;import net.sf.jasperreports.engine.JasperExportManager;import net.sf.jasperreports.engine.JasperFillManager;import net.sf.jasperreports.engine.JasperPrint;import net.sf.jasperreports.engine.JasperReport;import net.sf.jasperreports.engine.design.JasperDesign;import net.sf.jasperreports.engine.export.JExcelApiExporter;import net.sf.jasperreports.engine.export.JRHtmlExporter;import net.sf.jasperreports.engine.export.JRHtmlExporterParameter;import net.sf.jasperreports.engine.export.JRPrintServiceExporter;import net.sf.jasperreports.engine.export.JRPrintServiceExporterParameter;import net.sf.jasperreports.engine.export.JRXlsExporterParameter;import net.sf.jasperreports.engine.xml.JRXmlLoader;import net.sf.jasperreports.view.JasperViewer;import utiles.IListaElementos;import utiles.JConversiones;import utiles.JDepuracion;import utiles.JListaElementos;/** * * @author chema */public class JMotorInformes {    //Tipos de Impresion    public static final int mclPrevisualizar = 0;    public static final int mclHTML = 1;    public static final int mclPDF = 2;    public static final int mclImpresionDirecta = 3;    public static final int mclEXCEL = 4;    private JListDatos moList = null; //datos del informe    private Map moParametrosSalida = null; //Definicion de parametros de la generacion de la salida    private Map moParametros = null; //Definicion de parametros    private InputStream moInforme = null;//informe    private JasperReport moInformeCompilado = null;//informe    private int mlTipo = mclPrevisualizar;//tipo de salida    private OutputStream moSalida = null;//flujo de salida    private IListaElementos moSubreports  = new JListaElementos();    private String msImpresora="";//impresora    private String msHtmlRutaImagenTrans="";        //CM    private double mdAltoPag = 0;    //CM    private double mdMargenIzq=0;    //CM    private double mdMargenSup=0;    //CM    private double mdMargenDer=0;    //CM    private double mdMargenAbajo=0;        private PrintRequestAttributeSet moPrintRequestAttributeSet;    private JListdatosJasper moJasperList;        /** Creates a new instance of JMotorInformes */    public JMotorInformes() {    }    /**     * Constructor     * pnTipoListado= tipo listado (mclPrevisualizar, mclPDF, ...)     * poOut= salida, outputStream (Fichero, servlet, ...)     */    public JMotorInformes(int pnTipoListado, OutputStream poOut) {        mlTipo = pnTipoListado;        moSalida = poOut;    }    public JMotorInformes(int pnTipoListado, String psPath) throws FileNotFoundException {        this(pnTipoListado, new FileOutputStream(psPath));//        mlTipo = pnTipoListado;//        FileOutputStream loAIE = new FileOutputStream(psPath);//        moSalida = (OutputStream) loAIE;    }    public void setSalida(OutputStream poSalida) {        moSalida = poSalida;    }        public void setTipoListado(int plTipo) {        mlTipo = plTipo;    }        public void setList(JListDatos poList) {        moList = poList;    }        public  JListdatosJasper getJasperList(){        if(moList != null){            if(moJasperList == null){                moJasperList = new JListdatosJasper(moList);            }        }        if(moJasperList != null){            moJasperList.moList=moList;        }        return moJasperList;    }        public void setImpresora(String psImpresora) {        msImpresora = psImpresora;    }    public void setHtmlRutaImagenTransparente(String psRuta){        msHtmlRutaImagenTrans = psRuta;    }    public void setInformeCompilado(JasperReport poListadoComp) throws JRException {        moInformeCompilado = poListadoComp;    }        public void lanzarInforme(String psPath) throws FileNotFoundException, JRException {        FileInputStream loAIE = new FileInputStream(psPath);        moInforme = (InputStream) loAIE;        imprimir();    }        public void lanzarInforme(InputStream poListado) throws JRException {        moInforme = poListado;        imprimir();    }    public void lanzarInformeCompilado(JasperReport poListadoComp) throws JRException {        moInformeCompilado = poListadoComp;        imprimir();    }        public Map getParametros() {        if(moParametros == null) {            moParametros = new HashMap();        }        return moParametros;    }        public Map getParametrosSalida() {        if(moParametrosSalida == null) {            moParametrosSalida = new HashMap();        }        return moParametrosSalida;    }        public IListaElementos getListaSubReports() {        return moSubreports;    }        public void setParametro(String psNombre, String psValor) {        getParametros().put(psNombre, psValor);    }        public void addSubreport(String psParametro,JasperReport poReport,JRDataSource poDataSource) throws FileNotFoundException, Exception {        moSubreports = getListaSubReports();        moSubreports.add(new JSubReport(psParametro,poReport, poDataSource));            }    public void addSubreport(String psParametro,String psPath,JRDataSource poDataSource) throws FileNotFoundException, Exception {        //si no existe el informe error        File loFile = new File(psPath);        if(!loFile.exists()) {            throw new Exception("El informe " + psPath + " no existe");        }                moSubreports = getListaSubReports();        moSubreports.add(new JSubReport(psParametro,psPath, poDataSource));    }        public void addSubreport(String psParametro,InputStream poListado,JListdatosJasper poDataSource) {        moSubreports = getListaSubReports();        moSubreports.add(new JSubReport(psParametro,poListado, poDataSource));    }        public JSubReport getSubReport(final int plcod) {        return (JSubReport) moSubreports.get(plcod);    }    private static boolean isValor(float pdPulgadasW, float pdPulgadasH, float pdCMW, float pdCMH){        boolean lbResul = false;        //pasamos a cm        pdPulgadasW = (float) (pdPulgadasW * 2.54);        pdPulgadasH = (float) (pdPulgadasH * 2.54);        //ponemos siempre el mayo en el alto        if(pdCMW > pdCMH){            float ldAux = pdCMH;            pdCMH = pdCMW;            pdCMW = ldAux;        }        if(pdPulgadasW > pdPulgadasH){            float ldAux = pdPulgadasH;            pdPulgadasH = pdPulgadasW;            pdPulgadasW = ldAux;        }        lbResul=JConversiones.mlComparaDoubles(pdCMW, pdPulgadasW, 0.15)==0 &&                JConversiones.mlComparaDoubles(pdCMH, pdPulgadasH, 0.15)==0;        return lbResul;    }    public void setConfigurarImpresion(PrintRequestAttributeSet poValor){        moPrintRequestAttributeSet = poValor;    }    /**     * Devuelve la configuracion jasper de la pagina      * El ancho , alto y margenes son pixeles      */    public static  PrintRequestAttributeSet getConfigurarImpresion(int plAncho, int plAlto            , int plMargenIzq, int plMargenDer, int plMargenSup, int plMargenAbajo){        PrintRequestAttributeSet printRequestAttributeSet = new HashPrintRequestAttributeSet();        // Los métodos getPageWidth y getPageHeight devuelven        // en pixeles, de forma que hay que transformar        // dividiendo x 72 para transformar en pulgadas (inch)        float w = (float)plAncho/72f;        float h = (float)plAlto/72f;        // Busco el tamaño de papel de la impresora más parecido        MediaSizeName loMediaName = null;        if(isValor(w, h,(float) 21,(float) 29.7)) {            loMediaName = MediaSizeName.ISO_A4;        } else if(isValor(w, h, (float) 14.8,(float) 21)) {            loMediaName = MediaSizeName.ISO_A5;        } else if(isValor(w, h, (float) 29.7,(float) 42)) {            loMediaName = MediaSizeName.ISO_A3;        } else {            loMediaName = MediaSize.findMedia(w, h, MediaSize.INCH);        }        if(loMediaName!=null) {            printRequestAttributeSet.add(loMediaName);        }                                float leftMargin = (float)plMargenIzq/72f;        float rightMargin = (float)plMargenDer/72f;        float topMargin = (float)plMargenSup/72f;        float bottomMargin = (float)plMargenAbajo/72f;        float mediaWidth = w;        float mediaHeight = h;        if(plAncho<plAlto){            // vertical            printRequestAttributeSet.add(OrientationRequested.PORTRAIT);        } else {            // horizontal            printRequestAttributeSet.add(OrientationRequested.LANDSCAPE);            leftMargin = (float)plMargenSup/72f;            rightMargin = (float)plMargenAbajo/72f;            topMargin = (float)plMargenDer/72f;            bottomMargin = (float)plMargenIzq/72f;            mediaWidth = h;            mediaHeight = w;        }                    // Configuro el area de impresión        printRequestAttributeSet.add(                new MediaPrintableArea(                    leftMargin, topMargin                    , (mediaWidth - leftMargin - rightMargin)                    , (mediaHeight - topMargin - bottomMargin)                    , MediaPrintableArea.INCH));//        OrientationRequested orientation = OrientationRequested.PORTRAIT;//        if(plOrientacion == JRReport.ORIENTATION_LANDSCAPE){//            orientation = OrientationRequested.LANDSCAPE;//        }                return printRequestAttributeSet;            }    private boolean isHorizontal(PrintRequestAttributeSet printRequestAttributeSet){        boolean lbHorizontal = false;        Object loElem[] =printRequestAttributeSet.toArray();        for(int i = 0; i < loElem.length;i++){            if(loElem[i] == OrientationRequested.LANDSCAPE){                lbHorizontal = true;            }        }        return lbHorizontal;    }    /**     * Devuelve la configuracion jasper de la pagina      * El ancho y alto son el pixeles     * , plOrientacion = NO SE USA, se calcula a traves del ancho/alto JRReport.ORIENTATION_LANDSCAPE(horizontal), JRReport.ORIENTATION_PORTRAIT(vertical)     */    public static  PrintRequestAttributeSet getConfigurarImpresion(int plAncho, int plAlto, byte plOrientacion){        return getConfigurarImpresion(plAncho, plAlto, 0, 0, 0, 0);    }    public static int mlCMAPixel(double pdCM){        return  ((int)((pdCM/2.54)*72.0));    }    public static double mdPixelACM(int plPixeles){        return (plPixeles/72)*2.54;    }    private void guardarImagen(String psPathCompleto, String psDestino) throws Exception {        InputStream in = this.getClass().getResourceAsStream(psPathCompleto);        File loFile = new File(psDestino);        FileOutputStream out = new FileOutputStream(loFile);        try{            byte[] b1 = new byte[2048];            int lLen = -1;            while((lLen=in.read(b1))!=-1){                out.write(b1, 0, lLen);            }            out.close();        }finally{            in.close();        }    }        public void imprimir() throws JRException {        JasperPrint loJasperPrint;        //Paso 1: Compilar archivo jrxml lo convierte a un archivo .jasper        if(moInformeCompilado==null){            try{                JasperDesign jd = JRXmlLoader.load(moInforme);//               //                if(getMargenAbajo()>0){//                    jd.setBottomMargin(((int)((getMargenAbajo()/2.54)*72.0) ));//                }//                if(getMargenDer()>0){//                    jd.setRightMargin(((int)((getMargenDer()/2.54)*72.0) ));//                }//                if(getMargenIzq()>0){//                    jd.setLeftMargin(((int)((getMargenIzq()/2.54)*72.0) ));//                }//                if(getMargenSup()>0){//                    jd.setTopMargin(((int)((getMargenSup()/2.54)*72.0) ));//                }                moInformeCompilado = JasperCompileManager.compileReport(jd);            }catch(Exception e){                JDepuracion.anadirTexto(getClass().getName(), e);                moInformeCompilado = JasperCompileManager.compileReport(moInforme);            }        }        //Paso 2:   Relleno el report recien creado con datos de un listdatos        moJasperList = getJasperList();                //Paso 3: Pasamos los parametros necesarios al reporte principal        for(int i=0;i<moSubreports.size();i++){            //Pasamos el datasource como parametro            this.getParametros().put("DS_" + getSubReport(i).getNombreParametro(), getSubReport(i).getDataSource());            //Pasamos el report como parametro            this.getParametros().put("RPT_" + getSubReport(i).getNombreParametro(), getSubReport(i).getReport());        }                //Paso 4: Pasamos la configuracion de pagina de la impresion        PrintRequestAttributeSet printRequestAttributeSet=null;        if(moPrintRequestAttributeSet==null){            try{                printRequestAttributeSet = getConfigurarImpresion(                    moInformeCompilado.getPageWidth(),                    moInformeCompilado.getPageHeight(),                    0, 0, 0, 0                    );            }catch(Exception e){                JDepuracion.anadirTexto(getClass().getName(), e);            }        }else{            printRequestAttributeSet=moPrintRequestAttributeSet;        }                getParametros().put(                JRPrintServiceExporterParameter.PRINT_REQUEST_ATTRIBUTE_SET,                printRequestAttributeSet);        //Paso 4.1: Pasamos la configuracion de margenes de impresion        getParametros().put(                        JRPrintServiceExporterParameter.OFFSET_X                        , new Integer(mlCMAPixel(getMargenIzq())));        getParametros().put(                        JRPrintServiceExporterParameter.OFFSET_Y                        , new Integer(mlCMAPixel(getMargenSup())));                //Paso 4.2: ignoramos las fuentes que no existen        moInformeCompilado.setProperty("net.sf.jasperreports.awt.ignore.missing.font", "true");        //Paso 5: creo un objeto JasperPrint con los datos + el report        if(moJasperList != null) {            loJasperPrint = JasperFillManager.fillReport(moInformeCompilado, getParametros(), moJasperList);        } else {            loJasperPrint = JasperFillManager.fillReport(moInformeCompilado, getParametros());        }        if(mdAltoPag!=0) {            loJasperPrint.setPageHeight(mlCMAPixel(mdAltoPag));        }//no va      //        if(getMargenAbajo()>0){//            loJasperPrint.setBottomMargin(new Integer(mlCMAPixel((getMargenAbajo()))));//        }//        if(getMargenDer()>0){//            loJasperPrint.setRightMargin(new Integer(mlCMAPixel((getMargenDer()))));//        }//        if(getMargenIzq()>0){//            loJasperPrint.setLeftMargin(new Integer(mlCMAPixel((getMargenIzq()))));//        }//        if(getMargenSup()>0){//            loJasperPrint.setTopMargin(new Integer(mlCMAPixel((getMargenSup()))));//        }        switch(mlTipo) {            case mclPrevisualizar:                JasperViewer.viewReport(loJasperPrint, false);                break;            case mclHTML:                final JRHtmlExporter loExporterHtml = new JRHtmlExporter();                getParametrosSalida().put(                        JRHtmlExporterParameter.JASPER_PRINT,                        loJasperPrint);                getParametrosSalida().put(                        JRHtmlExporterParameter.OUTPUT_STREAM,                        moSalida);                if(msHtmlRutaImagenTrans == null || msHtmlRutaImagenTrans.equals("")){                    getParametrosSalida().put(                        JRHtmlExporterParameter.IMAGES_URI,                        "image?image=");                }else{                    try {                        guardarImagen("/impresionJasper/images/nullpx", (new File(msHtmlRutaImagenTrans, "nullpx")).getAbsolutePath());                    } catch (Exception ex) {                        JDepuracion.anadirTexto(JDepuracion.mclWARNING, getClass().getName(), "No se ha podido guardar la imagen transparente en " + (new File(msHtmlRutaImagenTrans, "nullpx")).getAbsolutePath() + " por ("+ex.toString()+")");                    }                }                loExporterHtml.setParameters(getParametrosSalida());                loExporterHtml.exportReport();                break;            case mclPDF:                JasperExportManager.exportReportToPdfStream(loJasperPrint, moSalida);                break;            case mclEXCEL:               JExcelApiExporter xlsExporter = new JExcelApiExporter();//               JRXlsExporter exporterXLS = new JRXlsExporter();//               loJasperPrint.setProperty("net.sf.jasperreports.export.xls.exclude.origin.keep.first.band.1", "pageHeader");               //  Remove the pageFooter from all the pages               loJasperPrint.setProperty("net.sf.jasperreports.export.xls.exclude.origin.band.2", "pageFooter");                              loJasperPrint.setProperty("net.sf.jasperreports.export.xls.exclude.origin.keep.first.band.1","columnHeader");               xlsExporter.setParameter(JRExporterParameter.JASPER_PRINT,                                                     loJasperPrint);               xlsExporter.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET,                                                     Boolean.FALSE);               xlsExporter.setParameter(JRXlsExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_ROWS,Boolean.TRUE);               xlsExporter.setParameter(JRExporterParameter.OUTPUT_STREAM,                                                     moSalida);               xlsExporter.exportReport();                break;            default:                //seleccion de impresora                PrintService service = PrintServiceLookup.lookupDefaultPrintService();                if(msImpresora!=null && !msImpresora.equals("")){                    PrintService[] loImpresoras = PrintServiceLookup.lookupPrintServices(null, null);                    PrintService loImpresora=null;                    for(int i = 0; i < loImpresoras.length  ; i++){                        if(loImpresoras[i].getName().equalsIgnoreCase(msImpresora)){                            loImpresora = loImpresoras[i];                        }                    }                    if(loImpresora!=null){                        service = loImpresora;                    }                }                JRExporter loExporterImpresionDirecta = new JRPrintServiceExporter();                loExporterImpresionDirecta.setParameter(                        JRExporterParameter.JASPER_PRINT,                        loJasperPrint);                loExporterImpresionDirecta.setParameter(                        JRPrintServiceExporterParameter.PRINT_SERVICE,                        service);                if(printRequestAttributeSet!=null){                    loExporterImpresionDirecta.setParameter(                        JRPrintServiceExporterParameter.PRINT_REQUEST_ATTRIBUTE_SET,                        printRequestAttributeSet);                }                              loExporterImpresionDirecta.setParameter(                        JRPrintServiceExporterParameter.OFFSET_X                        , new Integer(mlCMAPixel(getMargenIzq())));                loExporterImpresionDirecta.setParameter(                        JRPrintServiceExporterParameter.OFFSET_Y                        , new Integer(mlCMAPixel(getMargenSup())));                loExporterImpresionDirecta.exportReport();        }//        System.gc();    }    public static void mostrarOutPutCampos(JListDatos moList){        int i;        //Añado los campos        for(i=0;i<moList.getFields().count();i++) {            String cad = "";            cad = "<field name=\"";            cad += moList.getFields(i).getNombre();            cad += "\"";            switch(moList.getFields(i).getTipo()) {                case JListDatos.mclTipoBoolean:                    cad += " class=\"java.lang.Boolean\"/>";                    break;                case JListDatos.mclTipoCadena:                    cad += " class=\"java.lang.String\"/>";                    break;                case JListDatos.mclTipoFecha:                    cad += " class=\"java.util.Date\"/>";                    break;                case JListDatos.mclTipoNumero:                    cad += " class=\"java.lang.Integer\"/>";                    break;                case JListDatos.mclTipoNumeroDoble:                    cad += " class=\"java.lang.Double\"/>";                    break;            }            System.out.println(cad);        }        System.out.println("");            }    public static void mostrarOutPutCamposSumatorio(JListDatos moList){        int i;        //Añado las variables para hacer los sumatorios        for(i=0;i<moList.getFields().count();i++) {            if(moList.getFields(i).getTipo() == JListDatos.mclTipoNumero ||               moList.getFields(i).getTipo() == JListDatos.mclTipoNumeroDoble) {                String cad = "";                cad = "<variable name=\"";                cad += moList.getFields(i).getNombre();                cad += "\"";                switch(moList.getFields(i).getTipo()) {                    case JListDatos.mclTipoNumero:                        cad += " class=\"java.lang.Integer\" resetType=\"Report\" calculation=\"Sum\">";                        break;                    case JListDatos.mclTipoNumeroDoble:                        cad += " class=\"java.lang.Double\" resetType=\"Report\" calculation=\"Sum\">";                        break;                }                System.out.println(cad);                cad = "         <variableExpression><![CDATA[$F{"+ moList.getFields(i).getNombre() +"}]]></variableExpression>";                System.out.println(cad);                cad = "</variable>";                System.out.println(cad);            }        }        System.out.println("");            }    /**Alto pagina en PIXELES de jasperreport*/    public void setAltoPag(int plAlto) {        mdAltoPag = mdPixelACM(plAlto);    }    /**Alto pagina en CM*/    public void setAltoPag(double pdAlto) {        mdAltoPag = pdAlto;    }    /**     * Alto pagina en CM     * @return the mdAltoPag     */    public double getAltoPag() {        return mdAltoPag;    }    /**     * Margen en CM     * @return the mdMargenIzq     */    public double getMargenIzq() {        return mdMargenIzq;    }    /**     * Margen en CM     * @param mdMargenIzq the mdMargenIzq to set     */    public void setMargenIzq(double mdMargenIzq) {        this.mdMargenIzq = mdMargenIzq;    }    /**     * Margen en CM     * @return the mdMargenSup     */    public double getMargenSup() {        return mdMargenSup;    }    /**     * Margen en CM     * @param mdMargenSup the mdMargenSup to set     */    public void setMargenSup(double mdMargenSup) {        this.mdMargenSup = mdMargenSup;    }    /**     * Margen en CM     * @return the mdMargenDer     */    public double getMargenDer() {        return mdMargenDer;    }    /**     * Margen en CM     * @param mdMargenDer the mdMargenDer to set     */    public void setMargenDer(double mdMargenDer) {        this.mdMargenDer = mdMargenDer;    }    /**     * Margen en CM     * @return the mdMargenAbajo     */    public double getMargenAbajo() {        return mdMargenAbajo;    }    /**     * Margen en CM     * @param mdMargenAbajo the mdMargenAbajo to set     */    public void setMargenAbajo(double mdMargenAbajo) {        this.mdMargenAbajo = mdMargenAbajo;    }}