/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package impresionXML.impresion.xml.diseno.componentes;

import impresionXML.impresion.motorImpresion.JPagina;
import impresionXML.impresion.xml.IxmlObjetos;
import impresionXML.impresion.xml.JxmlBanda;
import impresionXML.impresion.xml.JxmlImagen;
import impresionXML.impresion.xml.JxmlInforme;
import impresionXML.impresion.xml.diseno.JPanelDESIGN;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Insets;
import java.awt.event.MouseEvent;
import java.awt.geom.Rectangle2D;
import java.beans.PropertyChangeListener;
import javax.swing.border.Border;

/**
 *
 * @author eduardo
 */
public class JPanelImagenVIEW  extends JPanelBASE implements PropertyChangeListener {
    private JxmlImagen moImagen;

    /**
     * Creates new form JPanelImagenVIEW
     */
    public JPanelImagenVIEW() {
        initComponents();
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        
    }
    public void setDatos(JxmlImagen poCuad, JxmlInforme poInforme){
        moImagen = poCuad;
        moInforme=poInforme;
        mostrarDatos();
        moImagen.addPropertyChangeListener(this);
        setBorder(new JPintaImagen(moImagen, moInforme, this));
    }
    public IxmlObjetos getXMLObjeto() {
        return moImagen;
    }

    protected void mostrarDatos() {
        this.setBounds(
                (int)(moImagen.getPosicionDestino().getX() * JPanelDESIGN.getMultiCMaPixel(moInforme.getDiseno().getZoom()))
                , (int)(moImagen.getPosicionDestino().getY() * JPanelDESIGN.getMultiCMaPixel(moInforme.getDiseno().getZoom()))
                , (int)(moImagen.getPosicionDestino().getWidth()* JPanelDESIGN.getMultiCMaPixel(moInforme.getDiseno().getZoom()))
                , (int)(moImagen.getPosicionDestino().getHeight()* JPanelDESIGN.getMultiCMaPixel(moInforme.getDiseno().getZoom()))
                );
    }  
    
    public void mouseDragged(MouseEvent mme) {
        super.mouseDragged(mme); 
        mbExterno=false;
        moImagen.setPosicionDestino(
                new Rectangle2D.Double(
                ((double)getX()) / JPanelDESIGN.getMultiCMaPixel(moInforme.getDiseno().getZoom())
                , ((double)getY()) / JPanelDESIGN.getMultiCMaPixel(moInforme.getDiseno().getZoom())
                , ((double)getWidth()) / JPanelDESIGN.getMultiCMaPixel(moInforme.getDiseno().getZoom())
                , ((double)getHeight()) / JPanelDESIGN.getMultiCMaPixel(moInforme.getDiseno().getZoom())
                )
                );
        mbExterno=true;
    }  

    public void mouseMoved(MouseEvent mme) {
        super.mouseMoved(mme); 
        try{
            getParent().setComponentZOrder(this, getParent().getComponentCount()-1);        
        }catch(Throwable e){}
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setOpaque(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables


}
class JPintaImagen implements Border {
    private JxmlImagen moImagen;
    private final JxmlInforme moInforme;
    private final JPanelImagenVIEW moPanel;
    
    public JPintaImagen(JxmlImagen poImagen, JxmlInforme poInforme, JPanelImagenVIEW poPanel) {
        moImagen=poImagen;
        moInforme=poInforme;
        moPanel=poPanel;
    }
    public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {
        Graphics2D loGraphic2d=(Graphics2D) g;
        Rectangle2D loRectImpresion = new Rectangle2D.Double();
        loRectImpresion.setRect(0, 0
                , moImagen.getPosicionDestino().getWidth()*JPanelDESIGN.getMultiCMaPixel(moInforme.getDiseno().getZoom())
                , moImagen.getPosicionDestino().getHeight()*JPanelDESIGN.getMultiCMaPixel(moInforme.getDiseno().getZoom()));
        Image loImage = moImagen.getImagen();
        if(loImage!=null){
            switch(moImagen.getRedimensionTipo()){
                case JxmlImagen.mclRedimensionTamanoRealOProporcinalSiNoCabe:
                    loRectImpresion=getImagenTamanoRealOProporcinalSiNoCabe(loImage, loRectImpresion);
                    loGraphic2d.drawImage(loImage, 0, 0, (int)loRectImpresion.getWidth(), (int)loRectImpresion.getHeight(), null);
                    break;
                case JxmlImagen.mclRedimensionNoProporcional:
                    loGraphic2d.drawImage(loImage, 0, 0, width, height, null);
                    break;
                default:
                    loRectImpresion=getImagenProporcional(loImage, loRectImpresion);
                    loGraphic2d.drawImage(loImage, 0, 0, (int)loRectImpresion.getWidth(), (int)loRectImpresion.getHeight(), null);
            }
        }
        if(moPanel.moPadre.getSeleccion().isSelected(moPanel.moDesign)){
            loGraphic2d.setColor(Color.red);
        }else{
            loGraphic2d.setColor(Color.LIGHT_GRAY);
        }
        loGraphic2d.drawRect(0, 0, width-1, height-1);        
        
    }
    private Rectangle2D getImagenTamanoRealOProporcinalSiNoCabe(Image loImage, Rectangle2D loRectImpresion){
        if(loImage.getWidth(null)<loRectImpresion.getWidth()  &&
           loImage.getHeight(null)<loRectImpresion.getHeight() ){

            loRectImpresion.setRect(0,  0, loImage.getWidth(null), loImage.getHeight(null));
            return loRectImpresion;
        }else{
            return getImagenProporcional(loImage, loRectImpresion);
        }

    }
    private Rectangle2D getImagenProporcional(Image loImage, Rectangle2D loRectImpresion){
        //se pone en la posicion destino pero conservando la proporcion
        double ldHeight = loRectImpresion.getWidth() * loImage.getHeight(null) / loImage.getWidth(null);
        if(ldHeight > loRectImpresion.getHeight()){
            double ldWidth = loRectImpresion.getHeight() * loImage.getWidth(null) / loImage.getHeight(null);
            loRectImpresion.setRect(
                    0,  0,
                    ldWidth, loRectImpresion.getHeight()
                    );
        }else{
            loRectImpresion.setRect(
                    0,  0,
                    loRectImpresion.getWidth(), ldHeight
                    );
        }
        return loRectImpresion;
    }

    public Insets getBorderInsets(Component c) {
        return new Insets(0,0,0,0);
    }

    public boolean isBorderOpaque() {
        return false;
    }

}


