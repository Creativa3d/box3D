/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package impresionXML.impresion.xml.diseno.componentes;

import impresionXML.impresion.estructura.JEstiloLinea;
import impresionXML.impresion.xml.IxmlObjetos;
import impresionXML.impresion.xml.JxmlLinea;
import impresionXML.impresion.xml.JxmlInforme;
import impresionXML.impresion.xml.diseno.JPanelDESIGN;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Insets;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;
import java.beans.PropertyChangeListener;
import javax.swing.border.Border;
import utiles.JConversiones;

/**
 *
 * @author eduardo
 */
public class JPanelLineaVIEW  extends JPanelBASE implements PropertyChangeListener {
    private JxmlLinea moLinea;

    /**
     * Creates new form JPanelLineaVIEW
     */
    public JPanelLineaVIEW() {
        initComponents();
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        
    }
    public void setDatos(JxmlLinea poCuad, JxmlInforme poInforme){
        moLinea = poCuad;
        moInforme=poInforme;
        mostrarDatos();
        moLinea.addPropertyChangeListener(this);
        setBorder(new JPintaLinea(moLinea, moInforme, this));
        
    }
    public IxmlObjetos getXMLObjeto() {
        return moLinea;
    }

    protected void mostrarDatos() {
        int lxMin = (int)(Math.min(moLinea.getPunto1().getX(), moLinea.getPunto2().getX()) * JPanelDESIGN.getMultiCMaPixel(moInforme.getDiseno().getZoom()));
        int lxMax = (int)(Math.max(moLinea.getPunto1().getX(), moLinea.getPunto2().getX()) * JPanelDESIGN.getMultiCMaPixel(moInforme.getDiseno().getZoom()));
        int lyMin = (int)(Math.min(moLinea.getPunto1().getY(), moLinea.getPunto2().getY()) * JPanelDESIGN.getMultiCMaPixel(moInforme.getDiseno().getZoom()));
        int lyMax = (int)(Math.max(moLinea.getPunto1().getY(), moLinea.getPunto2().getY()) * JPanelDESIGN.getMultiCMaPixel(moInforme.getDiseno().getZoom()));
        
        if(lxMin==lxMax){
            lxMax+= JConversiones.numeroDecimalesAlAlza(moLinea.getEstiloLinea().mdGrosor * moInforme.getDiseno().getZoom(),0);
        }
        if(lyMin==lyMax){
            lyMax+=JConversiones.numeroDecimalesAlAlza(moLinea.getEstiloLinea().mdGrosor * moInforme.getDiseno().getZoom(),0);
        }
        this.setBounds( lxMin, lyMin, lxMax-lxMin,lyMax-lyMin );

    }  
    public void mousePressed(MouseEvent e) {
        super.mousePressed(e);
    }    
    public void mouseDragged(MouseEvent mme) {
        super.mouseDragged(mme); 
        mbExterno=false;
        Point2D.Double loPunto1 = new Point2D.Double(
                ((double)getX()) / JPanelDESIGN.getMultiCMaPixel(moInforme.getDiseno().getZoom())
                , ((double)getY()) / JPanelDESIGN.getMultiCMaPixel(moInforme.getDiseno().getZoom())
        );
        Point2D.Double loPunto2;
        if(getWidth()>getHeight()){
            loPunto2=(new Point2D.Double(
                    ((double)getX()+(double)getWidth()) / JPanelDESIGN.getMultiCMaPixel(moInforme.getDiseno().getZoom())
                    , ((double)getY()) / JPanelDESIGN.getMultiCMaPixel(moInforme.getDiseno().getZoom())
                    ));
        }else{
            loPunto2=(new Point2D.Double(
                    ((double)getX()) / JPanelDESIGN.getMultiCMaPixel(moInforme.getDiseno().getZoom())
                    , ((double)getY()+(double)getHeight()) / JPanelDESIGN.getMultiCMaPixel(moInforme.getDiseno().getZoom())
                    ));
        }
        moLinea.setPunto1y2(loPunto1, loPunto2);
        mbExterno=true;
    }  

    public void mouseMoved(MouseEvent mme) {
        super.mouseMoved(mme); 
        try{
            getParent().setComponentZOrder(this, getParent().getComponentCount()-1);        
        }catch(Throwable e){}
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setOpaque(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables


}


class JPintaLinea implements Border {
    private JxmlLinea moLinea;
    private JxmlInforme moInforme;
    private final JPanelLineaVIEW moPanel;
    
    public JPintaLinea(JxmlLinea poLinea, JxmlInforme poInforme, JPanelLineaVIEW poPanel) {
        moLinea=poLinea;
        moPanel=poPanel;
        moInforme=poInforme;
    }
    public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {
        Graphics2D loGraphic2d=(Graphics2D) g;
        float ldGrosor = (float) (moLinea.getEstiloLinea().mdGrosor * (moInforme.getDiseno().getZoom()));
        
        if(moPanel.moPadre.getSeleccion().isSelected(moPanel.moDesign)){
            loGraphic2d.setColor(Color.red);
        }else{
            loGraphic2d.setColor(moLinea.getEstiloLinea().moColor);
        } 
        switch(moLinea.getEstiloLinea().mlEstilo){ 
            case JEstiloLinea.mclSolido:
                loGraphic2d.setStroke(new BasicStroke(ldGrosor, 0, BasicStroke.JOIN_MITER));
                break;
            case JEstiloLinea.mclRayado:
		loGraphic2d.setStroke(new BasicStroke(ldGrosor, 
                        BasicStroke.CAP_BUTT, 
                        BasicStroke.JOIN_MITER, 
                        10.0f,new float[] {10.0f}, 0.0f));
                 break;
            case JEstiloLinea.mclPunteado:
		loGraphic2d.setStroke(new BasicStroke(ldGrosor, 
                        BasicStroke.CAP_BUTT, 
                        BasicStroke.JOIN_MITER, 
                        2.0f,new float[] {2.0f}, 0.0f));
                break;
            default:
        }
        int lMenos=(int)(ldGrosor/2);
//        if(lMenos<=0){
//            lMenos=1;
//        }        
        if(JConversiones.numeroDecimales(moLinea.getPunto1().getX(), 1)==JConversiones.numeroDecimales(moLinea.getPunto2().getX(), 1)){
            loGraphic2d.drawLine(
                    x+lMenos, y+lMenos
                    , x - lMenos*2
                    , y + height-lMenos*2);                
        }else{
            loGraphic2d.drawLine(
                    x+lMenos, y+lMenos
                    , x + width-lMenos*2
                    , y - lMenos*2);                
        }

    }

    public Insets getBorderInsets(Component c) {
        return new Insets(0,0,0,0);
    }

    public boolean isBorderOpaque() {
        return false;
    }

}


