/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package impresionXML.impresion.xml.diseno.componentes;

import impresionXML.impresion.estructura.ITextoLibre;
import impresionXML.impresion.xml.IxmlObjetos;
import impresionXML.impresion.xml.JxmlFuente;
import impresionXML.impresion.xml.JxmlInforme;
import impresionXML.impresion.xml.JxmlTexto;
import impresionXML.impresion.xml.diseno.JPanelDESIGN;
import java.awt.Cursor;
import java.awt.event.MouseEvent;
import java.awt.geom.Rectangle2D;
import java.beans.PropertyChangeListener;

/**
 *
 * @author eduardo
 */
public class JPanelTextoVIEW extends JPanelBASE implements PropertyChangeListener {
    private JxmlTexto moTexto;


    /**
     * Creates new form JPanelCuadradoVIEW
     */
    public JPanelTextoVIEW() {
        super();
        initComponents();
        jTextAreaCZ1.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        jTextAreaCZ1.addKeyListener(this);
        jTextFieldCZ1.addKeyListener(this);

        jTextAreaCZ1.addMouseListener(this);
        jTextFieldCZ1.addMouseListener(this);
    }
    
    public void setDatos(JxmlTexto poTexto, JxmlInforme poInforme){
        moTexto = poTexto;
        moInforme=poInforme;
        mostrarDatos();
        poTexto.addPropertyChangeListener(this);
    }
    public IxmlObjetos getXMLObjeto() {
        return moTexto;
    }
    protected void mostrarDatos(){
        jTextAreaCZ1.setText(moTexto.getTexto());
        this.setBounds(
                (int)(moTexto.getPosicionDestino().getX() * JPanelDESIGN.getMultiCMaPixel(moInforme.getDiseno().getZoom()))
                , (int)(moTexto.getPosicionDestino().getY() * JPanelDESIGN.getMultiCMaPixel(moInforme.getDiseno().getZoom()))
                , (int)(moTexto.getPosicionDestino().getWidth()* JPanelDESIGN.getMultiCMaPixel(moInforme.getDiseno().getZoom()))
                , (int)(moTexto.getPosicionDestino().getHeight()* JPanelDESIGN.getMultiCMaPixel(moInforme.getDiseno().getZoom()))
                );
        JxmlFuente loFuente = moInforme.getFuente(moTexto.getFuente());
        if(loFuente==null){
            boolean lbOld = mbExterno;
            mbExterno=false;
            try{
            moTexto.setFuente(moInforme.getFuente(0).getNombre());
            mbExterno=true;
            }finally{
            mbExterno=lbOld;
            }
        }
        jTextAreaCZ1.setFont(moInforme.getFuente(moTexto.getFuente()).getFont(moInforme.getDiseno().getZoom()));
//        switch(moTexto.getAlineacion() ){
//            case ITextoLibre.mclAlineacionCentro:
//                jTextAreaCZ1.setHorizontalAlignment(jTextAreaCZ1.CENTER);
//                break;
//            case ITextoLibre.mclAlineacionDerecha:
//                jTextAreaCZ1.setHorizontalAlignment(jTextAreaCZ1.RIGHT);
//                break;
//            case ITextoLibre.mclAlineacionJustificada:
//                jTextAreaCZ1.setHorizontalAlignment(jTextAreaCZ1.LEFT);
//                break;
//            default:
//                jTextAreaCZ1.setHorizontalAlignment(jTextAreaCZ1.LEFT);
//        }
        jTextAreaCZ1.setForeground(moTexto.getColor());

    }

    @Override
    public void requestFocus() {
        jTextAreaCZ1.requestFocus(); 
    }

    
    public void mouseDragged(MouseEvent mme) {
        super.mouseDragged(mme); 
        boolean lbOld = mbExterno;
        mbExterno=false;
        try{
            moTexto.setPosicionDestino(
                    new Rectangle2D.Double(
                    ((double)getX()) / JPanelDESIGN.getMultiCMaPixel(moInforme.getDiseno().getZoom())
                    , ((double)getY()) / JPanelDESIGN.getMultiCMaPixel(moInforme.getDiseno().getZoom())
                    , ((double)getWidth()) / JPanelDESIGN.getMultiCMaPixel(moInforme.getDiseno().getZoom())
                    , ((double)getHeight()) / JPanelDESIGN.getMultiCMaPixel(moInforme.getDiseno().getZoom())
                    )
                    );
        }finally{
        mbExterno=lbOld;
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldCZ1 = new javax.swing.JTextField();
        jTextAreaCZ1 = new javax.swing.JTextArea();

        jTextFieldCZ1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255)));
        jTextFieldCZ1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTextFieldCZ1MousePressed(evt);
            }
        });
        jTextFieldCZ1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jTextFieldCZ1MouseDragged(evt);
            }
        });
        jTextFieldCZ1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCZ1ActionPerformed(evt);
            }
        });
        jTextFieldCZ1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldCZ1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldCZ1FocusLost(evt);
            }
        });

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.BorderLayout());

        jTextAreaCZ1.setColumns(20);
        jTextAreaCZ1.setRows(5);
        jTextAreaCZ1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jTextAreaCZ1.setOpaque(false);
        jTextAreaCZ1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTextAreaCZ1MousePressed(evt);
            }
        });
        jTextAreaCZ1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jTextAreaCZ1MouseDragged(evt);
            }
        });
        jTextAreaCZ1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextAreaCZ1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextAreaCZ1FocusLost(evt);
            }
        });
        add(jTextAreaCZ1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldCZ1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldCZ1MouseDragged
        mouseDragged(evt);
    }//GEN-LAST:event_jTextFieldCZ1MouseDragged

    private void jTextFieldCZ1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldCZ1MousePressed
//        mousePressed(evt);
    }//GEN-LAST:event_jTextFieldCZ1MousePressed

    private void jTextFieldCZ1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldCZ1FocusGained
//        mostrarPropiedades();
    }//GEN-LAST:event_jTextFieldCZ1FocusGained

    private void jTextFieldCZ1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldCZ1FocusLost
        boolean lbOld = mbExterno;
        mbExterno=false;
        try{
        moTexto.setTexto(jTextFieldCZ1.getText());
        }finally{
        mbExterno=lbOld;
        }
    }//GEN-LAST:event_jTextFieldCZ1FocusLost

    private void jTextFieldCZ1TextValueChanged(java.awt.event.TextEvent evt) {//GEN-FIRST:event_jTextFieldCZ1TextValueChanged
        boolean lbOld = mbExterno;
        mbExterno=false;
        try{
        moTexto.setTexto(jTextFieldCZ1.getText());
        }finally{
        mbExterno=lbOld;
        }
    }//GEN-LAST:event_jTextFieldCZ1TextValueChanged

    private void jTextFieldCZ1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCZ1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCZ1ActionPerformed

    private void jTextAreaCZ1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextAreaCZ1MouseDragged
        mouseDragged(evt);
    }//GEN-LAST:event_jTextAreaCZ1MouseDragged

    private void jTextAreaCZ1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextAreaCZ1MousePressed
        mousePressed(evt);
    }//GEN-LAST:event_jTextAreaCZ1MousePressed

    private void jTextAreaCZ1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextAreaCZ1FocusGained
//        mostrarPropiedades();
    }//GEN-LAST:event_jTextAreaCZ1FocusGained

    private void jTextAreaCZ1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextAreaCZ1FocusLost
        boolean lbOld = mbExterno;
        mbExterno=false;
        try{
        moTexto.setTexto(jTextAreaCZ1.getText());
        }finally{
        mbExterno=lbOld;
        }
    }//GEN-LAST:event_jTextAreaCZ1FocusLost

    private void jTextAreaCZ1TextValueChanged(java.awt.event.TextEvent evt) {//GEN-FIRST:event_jTextAreaCZ1TextValueChanged
        boolean lbOld = mbExterno;
        mbExterno=false;
        try{
        moTexto.setTexto(jTextAreaCZ1.getText());
        }finally{
        mbExterno=lbOld;
        }
    }//GEN-LAST:event_jTextAreaCZ1TextValueChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea jTextAreaCZ1;
    private javax.swing.JTextField jTextFieldCZ1;
    // End of variables declaration//GEN-END:variables



}
