/* * JListDatosXML.java * * Created on 23 de noviembre de 2004, 10:47 */package impresionXML.listDatos;//Javaimport java.io.IOException;//SAXimport org.xml.sax.InputSource;import org.xml.sax.SAXException;import javax.xml.transform.Source;import javax.xml.transform.sax.SAXSource;import impresionXML.tools.*;import ListDatos.*;import ListDatos.estructuraBD.*;/**Acepta un JListDatos y tiene propiedades de formato*/public class JListDatosXML  extends AbstractObjectReader  implements IXML {    private final JListDatos moList;    private final JListDatosXSL moFormato;    private final int mlIndex;        /**     * Creates a new instance of JListDatosXML     * @param poList datos     * @param plIndex índice de lso datos     */    public JListDatosXML(JListDatos poList, int plIndex) {        super();        moList = poList;        mlIndex = plIndex;        moFormato = new JListDatosXSL(moList.getFields().count());        for(int i = 0; i < moList.getFields().count(); i++){            moFormato.setAlineacionBD(i, moList.getFields().get(i).getTipo());        }    }    /**     * Devuelve el objeto formato     * @return objeto formato     */    public JListDatosXSL getFormato(){        return moFormato;    }    /**Parsea completo*/    public void parse(InputSource input) throws IOException, SAXException {        if (handler == null) {            throw new IllegalStateException("ContentHandler not set");        }                //Start the document        handler.startDocument();                handler.startElement("root");        parse(handler);        handler.endElement("root");        //End the document        handler.endDocument();                    }        public void parse(impresionXML.tools.EasyGenerationContentHandlerProxy handler) throws IOException, SAXException {        JFieldDefs loFields = moList.getFields();        handler.startElement("ListDatos" + String.valueOf(mlIndex));        handler.element("nombre" + String.valueOf(mlIndex), moList.msTabla);        handler.element("numeroCampos" + String.valueOf(mlIndex), String.valueOf(loFields.count()));                handler.startElement("cabezera" + String.valueOf(mlIndex));        for(int i = 0; i < loFields.count();i++){            handler.element("name" + String.valueOf(i), loFields.get(i).getCaption());        }        handler.endElement("cabezera"+String.valueOf(mlIndex));        handler.startElement("tipos" + String.valueOf(mlIndex));        for(int i = 0; i < loFields.count();i++){            handler.element("tipo" + String.valueOf(i), String.valueOf(loFields.get(i).getTipo()));        }        handler.endElement("tipos"+String.valueOf(mlIndex));        handler.startElement("datos"+String.valueOf(mlIndex));        if(moList.moveFirst()){            do{                handler.startElement("fila"+String.valueOf(mlIndex));                for(int i = 0; i < loFields.count();i++){                    handler.element("valor" + String.valueOf(i), loFields.get(i).toString());                }                handler.endElement("fila"+String.valueOf(mlIndex));            }while(moList.moveNext());        }        handler.endElement("datos"+String.valueOf(mlIndex));                handler.endElement("ListDatos" + String.valueOf(mlIndex));            }        public Source getSource() {        return new SAXSource(this, new InputSource());            }        public Source getXSL() {        JConstruirXSL loContruirXSL = new JConstruirXSL();                rellenarXSLParcial(loContruirXSL);                return loContruirXSL.getXSL();    }        public void rellenarXSLParcial(JConstruirXSL poContruirXSL) {        moFormato.rellenarXSLParcial(mlIndex, poContruirXSL);    }        public void rellenarXSLParcialFO(JConstruirXSLFO poContruirXSLFO) {        moFormato.rellenarXSLParcialFO(mlIndex, poContruirXSLFO, moList);    }        public InputSource getXSLFO() {        JConstruirXSLFO loContruirXSLFO = new JConstruirXSLFO();                rellenarXSLParcialFO(loContruirXSLFO);                return loContruirXSLFO.getXSLFO();    }    }