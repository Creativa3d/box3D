/* * JListDatosMaestro.java * * Created on 23 de noviembre de 2004, 10:53 */package impresionXML.listDatos;//Javaimport ListDatos.*;import impresionXML.tools.*;import java.io.IOException;import java.util.Iterator;import javax.xml.transform.Source;import javax.xml.transform.sax.SAXSource;import org.xml.sax.InputSource;import org.xml.sax.SAXException;import utiles.*;/**puede contener varios JListDatos/IXml con sus respectivos formatos*/public class JListDatosXMLMaestro extends AbstractObjectReader implements IXML {    private final JListaElementos moListDatos = new JListaElementos();        /**     * Añade un objeto IXML personalizado     * @param poXml objeto IXML      */    public void addXML(IXML poXml){        moListDatos.add(poXml);    }    /**     * Añade un objeto JListDatos     * @return Objeto JListDatosXML(JListDatos+formato )     * @param poList JListDatos     */    public JListDatosXML addListDatos(JListDatos poList){        JListDatosXML loXml = new JListDatosXML(poList, moListDatos.size());        if(moListDatos.size()==0){            loXml.getFormato().setNuevoTipoPagina(true);        }else{            loXml.getFormato().setNuevoTipoPagina(false);        }        moListDatos.add(loXml);        return loXml;    }    /**Parsea completo todas las partes y lo mete dentro de la estructura*/    public void parse(InputSource input) throws IOException, SAXException {        if (handler == null) {            throw new IllegalStateException("ContentHandler not set");        }                //Start the document        handler.startDocument();                handler.startElement("root");        parse(handler);        handler.endElement("root");        //End the document        handler.endDocument();            }        public void parse(impresionXML.tools.EasyGenerationContentHandlerProxy handler) throws IOException, SAXException {                //Generate SAX events for the ProjectTeam        generarHijos(handler);            }    private void generarHijos(impresionXML.tools.EasyGenerationContentHandlerProxy handler) throws IOException, SAXException {        Iterator i = moListDatos.iterator();        while (i.hasNext()) {            IXML member = (IXML)i.next();            member.parse(handler);        }            }    public Source getSource() {        return new SAXSource(this, new InputSource());    }        public Source getXSL() {        JConstruirXSL loContruirXSL = new JConstruirXSL();                rellenarXSLParcial(loContruirXSL);                return loContruirXSL.getXSL();    }        public void rellenarXSLParcial(JConstruirXSL poContruirXSL) {        Iterator i = moListDatos.iterator();        while (i.hasNext()) {            IXML member = (IXML)i.next();            member.rellenarXSLParcial(poContruirXSL);        }    }        public void rellenarXSLParcialFO(JConstruirXSLFO poContruirXSLFO) {        Iterator i = moListDatos.iterator();        while (i.hasNext()) {            IXML member = (IXML)i.next();            member.rellenarXSLParcialFO(poContruirXSLFO);        }    }    public InputSource getXSLFO() {        JConstruirXSLFO loContruirXSLFO = new JConstruirXSLFO();                rellenarXSLParcialFO(loContruirXSLFO);                return loContruirXSLFO.getXSLFO();    }    public String getXSLFOtoString() {        JConstruirXSLFO loContruirXSLFO = new JConstruirXSLFO();                rellenarXSLParcialFO(loContruirXSLFO);                return loContruirXSLFO.getXSLFOString();    }}