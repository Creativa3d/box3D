/*
 * JPanelVistaPrevia.java
 *
 * Created on 20 de febrero de 2007, 9:56
 */
package utilesGUIx.imgTrata;

import java.awt.AWTEvent;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.ContainerEvent;
import java.awt.event.ContainerListener;
import java.awt.event.MouseEvent;
import java.util.EventObject;
import javax.swing.ImageIcon;
import utiles.IListaElementos;
import utiles.JListaElementos;

public class JPanelVistaPrevia extends javax.swing.JPanel {

    private transient Image moImagen;
    private transient Image theCanvas;
    private double mdZoom = 1;
    private transient int mlHeight;
    private transient int mlWidth;
    private IListaElementos moZoomCambio = new JListaElementos();

    /** Creates new form JPanelVistaPrevia */
    public JPanelVistaPrevia() {
        super();
        initComponents();
        enableEvents(AWTEvent.MOUSE_EVENT_MASK);
        enableEvents(AWTEvent.MOUSE_MOTION_EVENT_MASK);
        addComponentListener(new ComponentListener() {

            public void componentResized(ComponentEvent e) {
                try{
                paintImageZoom();
                }catch(Exception e1){}
            }

            public void componentMoved(ComponentEvent e) {
                try{
                paintImageZoom();
                }catch(Exception e1){}
            }

            public void componentShown(ComponentEvent e) {
                try{
                paintImageZoom();
                }catch(Exception e1){}
            }

            public void componentHidden(ComponentEvent e) {
                try{
                paintImageZoom();
                }catch(Exception e1){}
            }
        });
    }

    public void setImagen(final Image poImagen) {
        moImagen=poImagen;
        if(moImagen!=null){
            setCursor(new Cursor(Cursor.HAND_CURSOR));
            mlWidth = moImagen.getWidth(this);
            mlHeight = moImagen.getHeight(this);

            //zoom ajustado a horizontal
            if(mlWidth>this.getWidth() && this.getWidth()>0){
                mdZoom = ((double)this.getWidth()-20)/(double)mlWidth;
            } else {
                if(this.getWidth()>mlWidth && this.getWidth()>0){
                    mdZoom = ((double)this.getWidth()-20)/(double)mlWidth;
                }
            }
            
        }
        paintImageZoom();


    }
    public void setImagen(final String psImagen) throws Exception {
        moImagen = JIMGTrata.getIMGTrata().getImagenCargada(psImagen).getImage();
        setImagen(moImagen);

    }

    public void addZoomCambioListener(final IZoomCambioListener l) {
        moZoomCambio.add(l);
    }

    private void llamarListenerZoom() {
        final EventObject loEvent = new EventObject(this);
        for (int i = 0; i < moZoomCambio.size(); i++) {
            ((IZoomCambioListener) moZoomCambio.get(i)).zoomCambio(loEvent);
        }
    }

    public double getZoom() {
        return mdZoom;
    }

    public void setZoom(final double zoom) {
        this.mdZoom = zoom;
        paintImageZoom();
        llamarListenerZoom();
    }

    public void paintImageZoom() {

        
        theCanvas = this.createImage((int)(mlWidth * getZoom()), (int)(mlHeight * getZoom()));
        if(theCanvas!=null){
            final Graphics g = theCanvas.getGraphics();

            g.setColor(Color.white);
            g.fillRect(0, 0, (int) (mlWidth * getZoom()), (int) (mlHeight * getZoom()));
            if(moImagen!=null){
                g.drawImage(moImagen,
                        0, 0,
                        (int) (mlWidth * getZoom()), (int) (mlHeight * getZoom()),
                        this);

                g.dispose();
            }
            lblImagen.setIcon(new ImageIcon(theCanvas));
        }
    }
    protected void processMouseEvent(final MouseEvent evt) {
        switch (evt.getID()) {
            case MouseEvent.MOUSE_PRESSED:

                break;
            case MouseEvent.MOUSE_EXITED:
 
                break;

            default:
        }

        super.processMouseEvent(evt);
    }

    protected void processMouseMotionEvent(final MouseEvent evt) {
        switch (evt.getID()) {
            case MouseEvent.MOUSE_MOVED:


                break;

            default:
        }

        super.processMouseMotionEvent(evt);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lblImagen = new javax.swing.JLabel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setViewportView(lblImagen);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized


    }//GEN-LAST:event_formComponentResized
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblImagen;
    // End of variables declaration//GEN-END:variables

    void stop() {
        
    }
}
