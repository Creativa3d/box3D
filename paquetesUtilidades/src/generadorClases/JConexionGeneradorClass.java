/* * JConexionGeneradorClass.java * * Created on 7 de diciembre de 2005, 19:11 * * To change this template, choose Tools | Template Manager * and open the template in the editor. */package generadorClases;import ListDatos.IResultado;import ListDatos.IServerServidorDatos;import ListDatos.JServerEjecutarSQL;import ListDatos.estructuraBD.*;public class JConexionGeneradorClass {    //Constantes    public static final int mcnTipoRelacionado = 0;    public static final int mcnTipoPropio = 1;        //datos del directorio de trabajo    private String msTabla;    private String msDirPadre;    private JUtiles moUtiles;   //Clase de utilidades        //Conjunto de tablas de la base de datos    private JTableDefs moTablas;    private JTableDefs moTablasSolo;    private String msRutaProyectoRaiz;    private String msRutaProyectoClases;    private String msRutaProyectoClasesRaiz;    private IServerServidorDatos moServer;        /** Creates a new instance of JConexionGeneradorClass */    public JConexionGeneradorClass(JProyecto poProyec) {        moUtiles = new JUtiles(poProyec);            }        public void setTablaActual(String psTabla) {        msTabla = psTabla;    }    public String getRutaProyectoClases(){        return msRutaProyectoClases;    }    public String getRutaProyectoClasesRaiz(){        return msRutaProyectoClasesRaiz;    }    public void setRutaProyectoRaiz(String psRutaProyecto) {        msRutaProyectoRaiz = psRutaProyecto;        msDirPadre = moUtiles.getDirPadre(msRutaProyectoRaiz);        msRutaProyectoClases = msRutaProyectoRaiz + System.getProperty("file.separator") + "cliente" + getDirPadre() + System.getProperty("file.separator") + getDirPadre();        msRutaProyectoClasesRaiz=msRutaProyectoRaiz + System.getProperty("file.separator") + "cliente" + getDirPadre();    }    //Establecer conexión    public void setConexion(IServerServidorDatos poServer) throws Exception {        moTablas = poServer.getTableDefs();        moServer = poServer;        moTablasSolo = new JTableDefs();        for(int i=0;i<=moTablas.getListaTablas().size()-1;i++) {            if(moTablas.get(i).getTipo() == JTableDef.mclTipoTabla &&                    !moTablas.get(i).getNombre().equalsIgnoreCase("dtproperties")) {                moTablasSolo.add(moTablas.get(i));            }        }    }        //datos del directorio de trabajo *********************************    public String getTablaActual() {        return msTabla;    }    public String getRutaProyectoRaiz() {        return msRutaProyectoRaiz;    }    public String getDirPadre() {        return msDirPadre;    }        //Datos de la base de datos *****************************************    public JTableDef getTablaBD(String psTabla) {        return moTablas.get(psTabla);        }        //solo devuelvo las que son tablas de usuario    public JTableDefs getTablasBD(){        return moTablasSolo;    }        public JFieldDefs getCamposBD(String psTabla) {        return moTablas.get(psTabla).getCampos();    }        public JRelacionesDefs getRelaciones(String psTabla) {        return moTablas.get(psTabla).getRelaciones();    }        public String getCampoDescripcion(String psTabla) {        String sol = "";        for(int i=0;i<getCamposBD(psTabla).count();i++) {            String lsCampo = getCamposBD(psTabla).get(i).getNombre();            if(lsCampo.compareTo("DESCRIPCION") == 0) {                sol = "DESCRIPCION";                break;            }            else if(lsCampo.compareTo("NOMBRE") == 0) {                sol = "NOMBRE";                break;            }        }        if(sol.compareTo("") == 0) {            sol = getCamposBD(psTabla).get(getCamposBD(psTabla).count()-1).getNombre();        }                return sol;    }        public boolean tieneRelacionesExport() {        int numRel = 0;        for(int i=0;i<getTablaBD(getTablaActual()).getRelaciones().count();i++) {            if(getTablaBD(getTablaActual()).getRelaciones().getRelacion(i).getTipoRelacion() == JRelacionesDef.mclRelacionExport) {                 numRel++;            }        }                if(numRel > 0) {            return(true);        } else {            return(false);        }    }        public boolean tieneRelacionesImport() {        int numRel = 0;        for(int i=0;i<getTablaBD(getTablaActual()).getRelaciones().count();i++) {            if(getTablaBD(getTablaActual()).getRelaciones().getRelacion(i).getTipoRelacion() == JRelacionesDef.mclRelacionImport) {                 numRel++;            }        }                if(numRel > 0) {            return(true);        } else {            return(false);        }    }        public String getNomTablaComplejo(int numRelacion,int plTipoCampo) {        int i;        String lsNomTabla;        String lsNomCampo;                lsNomTabla = moUtiles.msSustituirRaros(getTablaBD(getTablaActual()).getRelaciones().getRelacion(numRelacion).getTablaRelacionada());                                for(i=0;i < getTablaBD(getTablaActual()).getRelaciones().getRelacion(numRelacion).getCamposRelacionCount();i++) {            switch(plTipoCampo) {                case mcnTipoRelacionado:                    lsNomCampo = moUtiles.msSustituirRaros(getTablaBD(getTablaActual()).getRelaciones().getRelacion(numRelacion).getCampoRelacion(i));                    break;                case mcnTipoPropio:                    lsNomCampo = moUtiles.msSustituirRaros(getTablaBD(getTablaActual()).getRelaciones().getRelacion(numRelacion).getCampoPropio(i));                    break;                default:                    lsNomCampo = moUtiles.msSustituirRaros(getTablaBD(getTablaActual()).getRelaciones().getRelacion(numRelacion).getCampoPropio(i));                    break;            }                        lsNomTabla += lsNomCampo;        }                return lsNomTabla;    }        public String getNomTablaSimple(int numRelacion) {        int i;        String lsNomTabla;        JTableDef loTabla;                loTabla = getTablaBD(getTablaActual());                lsNomTabla = moUtiles.msSustituirRaros(loTabla.getRelaciones().getRelacion(numRelacion).getTablaRelacionada());                                        return lsNomTabla;    }    /**     * @return the moContructor     */    public void addSelect(String psSelect, String psNombre) throws Exception {        JServerEjecutarSQL loSQL = new JServerEjecutarSQL(psSelect);        IResultado loResult = moServer.ejecutarServer(loSQL);        if(loResult.getBien()){            JServerEjecutarSQL  loResultSQL = (JServerEjecutarSQL) loResult;             JTableDef loDefs = new JTableDef(psNombre, JTableDef.mclTipoTabla                    , loResultSQL.getListDatosResult().getFields().msNombres()                    , loResultSQL.getListDatosResult().getFields().malCamposPrincipales()                    , loResultSQL.getListDatosResult().getFields().malTipos()                    , loResultSQL.getListDatosResult().getFields().malTamanos());            moTablas.add(loDefs);            moTablasSolo.add(moTablas.get(moTablas.size()-1));        }  else {            throw new Exception(loResult.getMensaje());        }    }}